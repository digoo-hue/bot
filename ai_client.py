import os
import logging
import httpx
import json
from config import AI_API_URL, AI_API_KEY, AI_MODEL

logger = logging.getLogger(__name__)

async def summarize_posts(posts):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –≤ OpenRouter –∏ –ø–æ–ª—É—á–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–π —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ–±–∑–æ—Ä –≤—ã–±–æ—Ä–æ–≤ –≤ –ì–æ—Å–¥—É–º—É 2026.
    """
    if not posts:
        logger.warning("‚ö†Ô∏è –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return None

    try:
        headers = {
            "Authorization": f"Bearer {AI_API_KEY}",
            "Content-Type": "application/json",
            "Accept": "application/json",
        }

        prompt = (
            "–¢—ã –∞–Ω–∞–ª–∏—Ç–∏–∫-–ø–æ–ª–∏—Ç–æ–ª–æ–≥. –°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–∏–π, –ø–æ–Ω—è—Ç–Ω—ã–π –∏ –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–π –æ–±–∑–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π, "
            "—Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –≤—ã–±–æ—Ä–∞–º–∏ –≤ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—É—é –î—É–º—É –†–æ—Å—Å–∏–∏ 2026 –≥–æ–¥–∞. "
            "–ò–≥–Ω–æ—Ä–∏—Ä—É–π –ª—é–±—ã–µ –Ω–æ–≤–æ—Å—Ç–∏, –Ω–µ –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –≤—ã–±–æ—Ä–∞–º. "
            "–û—Ç–º–µ—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è, —Ü–∏—Ç–∞—Ç—ã –ø–æ–ª–∏—Ç–∏–∫–æ–≤, —Ä–µ—à–µ–Ω–∏—è –¶–ò–ö –∏ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –∫–∞–º–ø–∞–Ω–∏–∏. "
            "–ü–∏—à–∏ –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–º –∂—É—Ä–Ω–∞–ª–∏—Å—Ç—Å–∫–æ–º —Å—Ç–∏–ª–µ."
        )

        data = {
            "model": AI_MODEL,
            "messages": [
                {"role": "system", "content": prompt},
                {"role": "user", "content": "\n\n".join(posts)},
            ],
            "temperature": 0.6,
            "max_tokens": 1500,
        }

        logger.info(f"üîó –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ {AI_API_URL}")
        async with httpx.AsyncClient(timeout=120) as client:
            response = await client.post(AI_API_URL, headers=headers, json=data)

        if response.status_code != 200:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ OpenRouter: {response.status_code} - {response.text}")
            return None

        result = response.json()
        summary = result["choices"][0]["message"]["content"].strip()
        logger.info("‚úÖ –°–≤–æ–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")
        return summary

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenRouter: {e}")
        return None
