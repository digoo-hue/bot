import asyncio
import logging
import re
import html
from datetime import datetime, timedelta
import pytz
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
from config import (
    BOT_TOKEN,
    ADMIN_USER_ID,
    TARGET_CHANNEL_ID,
    SCHEDULE_HOUR,
    SCHEDULE_MIN,
    TZ,
)
from scraper import get_posts
from ai_client import summarize_posts

# -----------------------------------------
# üîß –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
# -----------------------------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞
DRAFTS = {}

# -----------------------------------------
# ü™∂ HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
# -----------------------------------------
def format_html_for_telegram(text: str) -> str:
    if not text:
        return ""

    text = html.escape(text)
    text = re.sub(r"^### (.+)$", r"<b>\1</b>", text, flags=re.MULTILINE)
    text = re.sub(r"^#### (.+)$", r"<i>\1</i>", text, flags=re.MULTILINE)
    text = re.sub(r"\*\*(.+?)\*\*", r"<b>\1</b>", text)
    text = re.sub(r"_(.+?)_", r"<i>\1</i>", text)
    text = re.sub(r"^- (.+)$", r"‚Ä¢ \1", text, flags=re.MULTILINE)
    text = re.sub(r"\n{3,}", "\n\n", text)
    return text.strip()

# -----------------------------------------
# üïí –ü–õ–ê–ù–ò–†–û–í–©–ò–ö
# -----------------------------------------
async def schedule_task(application):
    tz = pytz.timezone(TZ)
    while True:
        now = datetime.now(tz)
        target_time = tz.localize(datetime(now.year, now.month, now.day, SCHEDULE_HOUR, SCHEDULE_MIN))

        if now > target_time:
            target_time += timedelta(days=1)

        wait_time = (target_time - now).total_seconds()
        logger.info(f"–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {wait_time / 3600:.2f} —á (–≤ {target_time.strftime('%H:%M %Z')})")

        await asyncio.sleep(wait_time)
        await send_news_preview(application.bot)

# -----------------------------------------
# üß† –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–ë–ó–û–†–ê
# -----------------------------------------
async def send_news_preview(bot):
    logger.info("–ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤...")
    posts = await get_posts()

    if not posts:
        logger.warning("‚ùó –ü–æ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é.")
        return

    summary = await summarize_posts(posts)
    if not summary:
        logger.error("‚ùå –û—à–∏–±–∫–∞: OpenAI –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç.")
        return

    formatted_summary = format_html_for_telegram(summary)
    logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenAI, –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: %d —Å–∏–º–≤–æ–ª–æ–≤", len(summary))

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="approve"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="reject"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        msg = await bot.send_message(
            chat_id=ADMIN_USER_ID,
            text=formatted_summary,
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
        DRAFTS[msg.message_id] = formatted_summary
        logger.info("–ß–µ—Ä–Ω–æ–≤–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É ‚úÖ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É: {e}")

# -----------------------------------------
# üß≠ –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î
# -----------------------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö —Å–≤–æ–¥–æ–∫. –ö–æ–º–∞–Ω–¥–∞: /preview")

async def preview(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /preview –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    await update.message.reply_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–±–∑–æ—Ä, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏ ‚è≥...")
    await send_news_preview(context.bot)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    msg_id = query.message.message_id

    if query.data == "approve":
        logger.info("‚úÖ –ê–¥–º–∏–Ω –æ–¥–æ–±—Ä–∏–ª –ø—É–±–ª–∏–∫–∞—Ü–∏—é")
        await query.edit_message_text(text="‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–¥–æ–±—Ä–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ –∫–∞–Ω–∞–ª...")

        try:
            formatted_text = DRAFTS.get(msg_id)
            if not formatted_text:
                logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
                return

            await context.bot.send_message(
                chat_id=TARGET_CHANNEL_ID,
                text=formatted_text,
                parse_mode="HTML"
            )
            await context.bot.send_message(chat_id=ADMIN_USER_ID, text="‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ.")
            logger.info("üéØ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª.")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
            await context.bot.send_message(chat_id=ADMIN_USER_ID, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

    elif query.data == "reject":
        logger.info("‚ùå –ê–¥–º–∏–Ω –æ—Ç–∫–ª–æ–Ω–∏–ª –ø—É–±–ª–∏–∫–∞—Ü–∏—é")
        await query.edit_message_text(text="‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

# -----------------------------------------
# üõ†Ô∏è –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö
# -----------------------------------------
async def error_handler(update, context):
    logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {context.error}")
    try:
        if ADMIN_USER_ID:
            await context.bot.send_message(
                chat_id=ADMIN_USER_ID,
                text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:\n{context.error}"
            )
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")

# -----------------------------------------
# üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê
# -----------------------------------------
async def start_bot():
    logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("preview", preview))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_error_handler(error_handler)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞—á–∏–Ω–∞—é polling –∏ background tasks.")
    asyncio.create_task(schedule_task(application))
    await application.run_polling()

# -----------------------------------------
# ‚ñ∂Ô∏è –û–°–ù–û–í–ù–û–ô –í–•–û–î
# -----------------------------------------
if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.run(start_bot())
