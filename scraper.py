import logging
from telethon import TelegramClient
from telethon.tl.functions.messages import GetHistoryRequest
import asyncio
import os
from config import TELEGRAM_API_ID, TELEGRAM_API_HASH

logger = logging.getLogger(__name__)

CHANNELS_FILE = "channels.txt"
SESSION_NAME = "session_scraper"


async def get_posts(limit_per_channel=10):
    """
    –°–∫–∞–Ω–∏—Ä—É–µ—Ç –∫–∞–Ω–∞–ª—ã –∏–∑ channels.txt –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –≤—ã–±–æ—Ä–∞–º–∏ –≤ –ì–æ—Å–¥—É–º—É 2026.
    """
    posts = []

    api_id = int(TELEGRAM_API_ID)
    api_hash = TELEGRAM_API_HASH

    client = TelegramClient(SESSION_NAME, api_id, api_hash)
    await client.start()

    logger.info("–ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤...")

    if not os.path.exists(CHANNELS_FILE):
        logger.error("–§–∞–π–ª channels.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return []

    with open(CHANNELS_FILE, "r") as f:
        channels = [line.strip() for line in f if line.strip()]

    for channel in channels:
        try:
            logger.info(f"üì° –ß–∏—Ç–∞—é –∫–∞–Ω–∞–ª {channel}")
            entity = await client.get_entity(channel)
            history = await client(GetHistoryRequest(
                peer=entity,
                limit=limit_per_channel,
                offset_date=None,
                offset_id=0,
                max_id=0,
                min_id=0,
                add_offset=0,
                hash=0
            ))

            for message in history.messages:
                if message.message:
                    posts.append(message.message)

            logger.info(f"‚úÖ {channel}: —Å–æ–±—Ä–∞–Ω–æ {len(history.messages)} –ø–æ—Å—Ç–æ–≤.")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å {channel}: {e}")

    await client.disconnect()

    # üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–æ –≤—ã–±–æ—Ä—ã
    KEYWORDS = [
        "–≤—ã–±–æ—Ä—ã", "–≥–æ—Å–¥—É–º–∞", "–¥–µ–ø—É—Ç–∞—Ç", "–ø–∞—Ä–ª–∞–º–µ–Ω—Ç", "2026",
        "–¶–ò–ö", "–∏–∑–±–∏—Ä–∞—Ç–µ–ª—å", "–∏–∑–±–∏—Ä–∞—Ç–µ–ª—å–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è", "–∫–∞–Ω–¥–∏–¥–∞—Ç", "–ø–∞—Ä—Ç–∏—è"
    ]

    filtered_posts = [
        post for post in posts
        if any(word.lower() in post.lower() for word in KEYWORDS)
    ]

    logger.info(f"üîé –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å {len(filtered_posts)} –ø–æ—Å—Ç–æ–≤ –ø—Ä–æ –≤—ã–±–æ—Ä—ã –∏–∑ {len(posts)}.")
    return filtered_posts


if __name__ == "__main__":
    asyncio.run(get_posts())
